import io
import re
import streamlit as st
import fitz  # PyMuPDF
import traceback
from rapidocr_onnxruntime import RapidOCR

# --- CONFIGURA√á√ÉO E FUN√á√ïES AUXILIARES ---
st.set_page_config(page_title="Diagn√≥stico de Extra√ß√£o", layout="wide")
st.title("üî¨ Diagn√≥stico de Extra√ß√£o de Texto (Vers√£o Segura)")
st.info("Foco: Melhorar a extra√ß√£o de texto de PDFs e medir a qualidade da extra√ß√£o em ambos os formatos.")

def limpar_texto(txt: str) -> str:
    return re.sub(r"\s+", " ", txt).strip() if txt else ""

# --- M√âTRICAS DE QUALIDADE (IDEIA DO CHATGPT) ---
# R√≥tulos-chave que esperamos encontrar em um formul√°rio AIH
LABEL_PATTERNS = {
    "LAUDO SOLICITA√á√ÉO INTERNA√á√ÉO": r"LAUDO\s+PARA\s+SOLICITA[√áC][A√É]O\s+DE\s+INTERNA[√áC][A√É]O",
    "Nome do Paciente": r"Nome\s+do\s+Paciente",
    "Nome da M√£e": r"Nome\s+da\s+M[√£a]e",
    "CNS": r"\bCNS\b",
    "Data de Nasc": r"Data\s+de\s+Nasc",
    "Endere√ßo Residencial": r"Endere[√ßc]o\s+Residencial",
    "Munic√≠pio de Refer√™ncia": r"Munic[i√≠]pio\s+de\s+Refer[√™e]ncia",
    "Diagn√≥stico Inicial": r"Diagn[o√≥]stico\s+Inicial",
    "Procedimento Solicitado": r"Procedimento\s+Solicitado",
}

def quality_score(text: str):
    """Calcula a porcentagem de r√≥tulos-chave encontrados no texto."""
    found_labels = {label: bool(re.search(pattern, text, re.IGNORECASE)) for label, pattern in LABEL_PATTERNS.items()}
    score = sum(found_labels.values()) / len(LABEL_PATTERNS)
    return score, found_labels

# --- FUN√á√ïES EXTRATORAS DE TEXTO (PDF MELHORADO) ---
@st.cache_resource
def get_ocr_model():
    return RapidOCR()

def extract_text_from_pdf_improved(pdf_bytes: bytes) -> str:
    """
    VERS√ÉO MELHORADA: Usa 'blocks' para manter a estrutura de linhas, 
    aumentando a qualidade do texto para an√°lise.
    """
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    full_text = ""
    for page in doc:
        blocks = sorted(page.get_text("blocks"), key=lambda b: b[1])
        for block in blocks:
            full_text += block[4].replace('\n', ' ').strip() + "\n"
    # Limpa linhas vazias em excesso, mas mant√©m a estrutura
    return re.sub(r'\n{2,}', '\n', full_text).strip()

def extract_text_from_image_simple(image_bytes: bytes) -> str:
    """Mant√©m a extra√ß√£o de imagem simples e est√°vel, sem OpenCV."""
    ocr = get_ocr_model()
    result, _ = ocr(image_bytes)
    if not result: return "OCR n√£o encontrou nenhum texto."
    # Junta o texto do OCR com quebras de linha para simular um layout
    full_text = "\n".join([item[1] for item in result])
    return full_text.strip()

# --- INTERFACE DA FERRAMENTA DE DIAGN√ìSTICO APRIMORADA ---
st.markdown("---")
st.header("1. Teste de PDF (Extra√ß√£o Melhorada)")
pdf_upload = st.file_uploader("Carregue um PDF", type="pdf", key="pdf_direct")

if pdf_upload:
    with st.spinner("Extraindo texto do PDF..."):
        pdf_bytes = pdf_upload.read()
        extracted_text = extract_text_from_pdf_improved(pdf_bytes)
        score, found_labels = quality_score(extracted_text)
        
        col1, col2 = st.columns([2, 1])
        with col1:
            st.text_area("üìÑ Texto Extra√≠do (PDF)", extracted_text, height=300)
        with col2:
            st.metric("Cobertura de R√≥tulos", f"{score:.0%}")
            st.write("**R√≥tulos Encontrados:**")
            st.json({label: status for label, status in found_labels.items() if status})
            st.write("**R√≥tulos Ausentes:**")
            st.json({label: status for label, status in found_labels.items() if not status})

st.markdown("---")
st.header("2. Teste de Imagem (Extra√ß√£o Simples)")
image_upload = st.file_uploader("Carregue uma Imagem", type=["png", "jpg", "jpeg"], key="image_ocr")

if image_upload:
    with st.spinner("Analisando imagem com OCR..."):
        image_bytes = image_upload.read()
        extracted_text = extract_text_from_image_simple(image_bytes)
        score, found_labels = quality_score(extracted_text)
        
        col1, col2 = st.columns([2, 1])
        with col1:
            st.text_area("üñºÔ∏è Texto Extra√≠do (Imagem)", extracted_text, height=300)
        with col2:
            st.metric("Cobertura de R√≥tulos", f"{score:.0%}")
            st.write("**R√≥tulos Encontrados:**")
            st.json({label: status for label, status in found_labels.items() if status})
            st.write("**R√≥tulos Ausentes:**")
            st.json({label: status for label, status in found_labels.items() if not status})